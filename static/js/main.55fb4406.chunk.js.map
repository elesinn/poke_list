{"version":3,"sources":["assets/images/default.jpg","components/PokemonInfoModal.jsx","components/PokemonCard.jsx","components/MyTag.jsx","components/PokemonListHeader.jsx","store/PokemonStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PokemonInfoModal","pokemon","visible","handleOk","store","useState","abilities","setAbilities","isLoaded","setIsLoaded","useEffect","getDetailedAbilities","id","then","data","map","el","name","description","useObserver","title","onCancel","footer","key","type","onClick","itemLayout","dataSource","renderItem","item","Item","Meta","active","loading","PokemonCard","modalIsVisible","setModalIsVisible","isCompleteData","getDetailedInfo","setDefaultImg","ev","target","src","defaultImage","showModal","hoverable","className","onError","alt","image","tags","tag","header","stats","stat","value","paragraph","rows","size","MyTag","handleCheck","checked","props","CheckableTag","onChange","PokemonListHeader","observer","getTypes","placeholder","filter","updateFilter","typesIsLoaded","types","typeName","selectTag","unselectTag","selected","PokemonStoreContext","React","createContext","PokemonStoreProvider","children","useLocalStore","pokemons","pokemonsIsLoaded","addPokemon","push","matchesFilter","RegExp","test","selectedTags","length","some","includes","find","getPokemonsList","fetch","response","json","formatedResult","url","split","slice","charAt","toUpperCase","error","console","log","forEach","i","reduce","acc","ability","promiseArray","Promise","all","Provider","Header","Layout","Footer","Content","PokemonApp","useContext","grid","gutter","xs","sm","lg","xl","pagination","pageSizeOptions","filteredPokemons","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.55fb4406.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.498b37b6.jpg\";","import React, { useState, useEffect } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Modal, Button, List, Skeleton } from \"antd\"\r\nimport { useObserver } from \"mobx-react-lite\"\r\n\r\nexport const PokemonInfoModal = ({ pokemon, visible, handleOk, store }) => {\r\n  const [abilities, setAbilities] = useState({})\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      setIsLoaded(false)\r\n      store.getDetailedAbilities(pokemon.id).then((data) => {\r\n        setAbilities(\r\n          data.map((el) => ({\r\n            name: el[\"names\"][\"2\"][\"name\"],\r\n            description: el[\"effect_entries\"][\"0\"][\"effect\"],\r\n          }))\r\n        )\r\n        setIsLoaded(true)\r\n      })\r\n    }\r\n  }, [visible])\r\n\r\n  return useObserver(() => (\r\n    <Modal\r\n      title=\"Abilities\"\r\n      visible={visible}\r\n      onCancel={handleOk}\r\n      footer={[\r\n        <Button key=\"back\" type=\"primary\" onClick={handleOk}>\r\n          Return\r\n        </Button>,\r\n      ]}\r\n    >\r\n      {isLoaded ? (\r\n        <List\r\n          itemLayout=\"horizontal\"\r\n          dataSource={abilities}\r\n          renderItem={(item) => (\r\n            <List.Item>\r\n              <List.Item.Meta\r\n                title={item.name}\r\n                description={item.description}\r\n              />\r\n            </List.Item>\r\n          )}\r\n        />\r\n      ) : (\r\n        <Skeleton active loading={true} />\r\n      )}\r\n    </Modal>\r\n  ))\r\n}\r\n\r\nPokemonInfoModal.propTypes = {\r\n  visible: PropTypes.bool,\r\n  handleOk: PropTypes.func,\r\n  pokemon: PropTypes.object,\r\n  store: PropTypes.object,\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { Card, Skeleton, List, Tag, Button } from \"antd\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport defaultImage from \"./../assets/images/default.jpg\"\r\nimport { useObserver } from \"mobx-react-lite\"\r\nimport { PokemonInfoModal } from \"./PokemonInfoModal\"\r\n\r\nexport const PokemonCard = ({ pokemon, store }) => {\r\n  const [modalIsVisible, setModalIsVisible] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!pokemon.isCompleteData) {\r\n      store.getDetailedInfo(pokemon.id)\r\n    }\r\n  }, [pokemon])\r\n\r\n  const setDefaultImg = (ev) => {\r\n    ev.target.src = defaultImage\r\n  }\r\n\r\n  const showModal = () => {\r\n    setModalIsVisible(true)\r\n  }\r\n\r\n  return useObserver(() => (\r\n    <>\r\n      <Card hoverable title={pokemon.name} className=\"animated-card\">\r\n        <div className=\"img-container\">\r\n          <img onError={setDefaultImg} alt=\"pokemon\" src={pokemon.image} />\r\n        </div>\r\n\r\n        {pokemon.isCompleteData ? (\r\n          <>\r\n            <div>\r\n              {pokemon.tags.map((tag) => (\r\n                <Tag key={tag} className={`type-${tag}`}>\r\n                  {tag}\r\n                </Tag>\r\n              ))}\r\n            </div>\r\n            <List\r\n              header={\r\n                <div>\r\n                  <b>Main stats:</b>\r\n                </div>\r\n              }\r\n              dataSource={pokemon.stats}\r\n              renderItem={(stat) => (\r\n                <List.Item>\r\n                  <span>{stat.name}:</span> {stat.value}\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </>\r\n        ) : (\r\n          <Skeleton active loading={true} paragraph={{ rows: 6 }} />\r\n        )}\r\n        <Button key=\"show\" type=\"primary\" size=\"large\" onClick={showModal}>\r\n          Show abilities\r\n        </Button>\r\n      </Card>\r\n      <PokemonInfoModal\r\n        pokemon={pokemon}\r\n        visible={modalIsVisible}\r\n        handleOk={() => setModalIsVisible(false)}\r\n        store={store}\r\n      />\r\n    </>\r\n  ))\r\n}\r\n\r\nPokemonCard.propTypes = {\r\n  pokemon: PropTypes.object,\r\n  store: PropTypes.object,\r\n}\r\n","import React from \"react\"\r\nimport { Tag } from \"antd\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport const MyTag = ({ handleCheck, checked, ...props }) => {\r\n  const handleChange = (checked) => {\r\n    handleCheck(checked)\r\n  }\r\n\r\n  return (\r\n    <Tag.CheckableTag {...props} checked={checked} onChange={handleChange} />\r\n  )\r\n}\r\n\r\nMyTag.propTypes = {\r\n  handleCheck: PropTypes.func,\r\n  checked: PropTypes.bool,\r\n}\r\n","import React, { useEffect } from \"react\"\r\nimport { Input, Spin } from \"antd\"\r\nimport { MyTag } from \"./MyTag\"\r\nimport { observer } from \"mobx-react-lite\"\r\n\r\nexport const PokemonListHeader = observer(({ store }) => {\r\n  useEffect(() => {\r\n    store.getTypes()\r\n  }, [])\r\n\r\n  const filterPokemons = ({ target: { value } }) => {\r\n    store.updateFilter(value)\r\n  }\r\n\r\n  const handleCheck = (typeName, value) => {\r\n    value ? store.selectTag(typeName) : store.unselectTag(typeName)\r\n  }\r\n\r\n  return (\r\n    <div className=\"list-header\">\r\n      <div className=\"search-container\">\r\n        <Input\r\n          placeholder=\"Enter Pokemon name\"\r\n          value={store.filter}\r\n          onChange={filterPokemons}\r\n        />\r\n      </div>\r\n      {store.typesIsLoaded ? (\r\n        <div className=\"types\">\r\n          Filter by already loaded pokemons (avoid API spam), change page to\r\n          load more pokemons.\r\n          <br />\r\n          {store.types.map((type) => (\r\n            <MyTag\r\n              key={type.name}\r\n              className={`type-${type.name}`}\r\n              handleCheck={(value) => handleCheck(type.name, value)}\r\n              checked={type.selected}\r\n            >\r\n              {type.name}\r\n            </MyTag>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <Spin size=\"large\" />\r\n      )}\r\n    </div>\r\n  )\r\n})\r\n","import React from \"react\"\r\nimport { useLocalStore } from \"mobx-react-lite\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport const PokemonStoreContext = React.createContext()\r\n\r\nexport const PokemonStoreProvider = ({ children }) => {\r\n  const store = useLocalStore(() => ({\r\n    pokemons: [],\r\n    types: [],\r\n    filter: \"\",\r\n    pokemonsIsLoaded: false,\r\n    typesIsLoaded: false,\r\n    addPokemon: (pokemon) => {\r\n      store.pokemons.push(pokemon)\r\n    },\r\n\r\n    get filteredPokemons() {\r\n      const matchesFilter = new RegExp(store.filter, \"i\")\r\n\r\n      return store.pokemons\r\n        .filter(({ name }) => !store.filter || matchesFilter.test(name))\r\n        .filter((pokemon) => {\r\n          if (store.selectedTags.length > 0) {\r\n            if (pokemon.tags) {\r\n              return pokemon.tags.some((tag) =>\r\n                store.selectedTags.includes(tag)\r\n              )\r\n            } else {\r\n              return false\r\n            }\r\n          } else {\r\n            return true\r\n          }\r\n        })\r\n    },\r\n\r\n    get selectedTags() {\r\n      let selectedTags = store.types\r\n        .filter((type) => type.selected === true)\r\n        .map((type) => type.name)\r\n      return selectedTags\r\n    },\r\n\r\n    updateFilter(value) {\r\n      store.filter = value\r\n    },\r\n\r\n    selectTag(typeName) {\r\n      store.types.find((type) => type.name === typeName).selected = true\r\n    },\r\n\r\n    unselectTag(typeName) {\r\n      store.types.find((type) => type.name === typeName).selected = false\r\n    },\r\n\r\n    getPokemonsList: () => {\r\n      fetch(\"https://pokeapi.co/api/v2/pokemon/?limit=1000\")\r\n        .then((response) => response.json())\r\n        .then(\r\n          (response) => {\r\n            //format response\r\n            const formatedResult = response[\"results\"].map((pokemon) => {\r\n              const id = pokemon.url.split(\"/\").slice(-2, -1)\r\n              const name =\r\n                pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)\r\n              return {\r\n                id,\r\n                name,\r\n                isCompleteData: false,\r\n                image: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`,\r\n              }\r\n            })\r\n            store.pokemons = formatedResult\r\n            store.pokemonsIsLoaded = true\r\n          },\r\n          (error) => {\r\n            console.log(\"ERROR:\", error)\r\n          }\r\n        )\r\n    },\r\n\r\n    getTypes: () => {\r\n      fetch(\"https://pokeapi.co/api/v2/type/\")\r\n        .then((response) => response.json())\r\n        .then(\r\n          (response) => {\r\n            store.types = response[\"results\"]\r\n            store.types.forEach((type, i) => (store.types[i].selected = false))\r\n            store.typesIsLoaded = true\r\n          },\r\n          (error) => {\r\n            console.log(\"ERROR:\", error)\r\n          }\r\n        )\r\n    },\r\n\r\n    getDetailedInfo: (id) => {\r\n      //fetch data and cache in store\r\n      fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\r\n        .then((response) => response.json())\r\n        .then(\r\n          (response) => {\r\n            //format response\r\n            const pokemon = store.pokemons.find((pokemon) => pokemon.id === id)\r\n\r\n            pokemon.tags = response[\"types\"].reduce((acc, type) => {\r\n              acc.push(type[\"type\"][\"name\"])\r\n              return acc\r\n            }, [])\r\n\r\n            pokemon.stats = response[\"stats\"].reduce((acc, stat) => {\r\n              acc.push({\r\n                name: stat[\"stat\"][\"name\"],\r\n                value: stat[\"base_stat\"],\r\n              })\r\n              return acc\r\n            }, [])\r\n\r\n            pokemon.abilities = response[\"abilities\"].reduce((acc, ability) => {\r\n              acc.push(ability[\"ability\"])\r\n              return acc\r\n            }, [])\r\n\r\n            pokemon.isCompleteData = true\r\n          },\r\n          (error) => {\r\n            console.log(\"ERROR\", error)\r\n          }\r\n        )\r\n    },\r\n\r\n    getDetailedAbilities(id) {\r\n      const pokemon = store.pokemons.find((pokemon) => pokemon.id === id)\r\n\r\n      let promiseArray = []\r\n      pokemon.abilities.forEach((ability) => {\r\n        promiseArray.push(\r\n          fetch(ability.url).then((response) => response.json())\r\n        )\r\n      })\r\n      let result = Promise.all(promiseArray)\r\n      return result\r\n    },\r\n  }))\r\n\r\n  return (\r\n    <PokemonStoreContext.Provider value={store}>\r\n      {children}\r\n    </PokemonStoreContext.Provider>\r\n  )\r\n}\r\n\r\nPokemonStoreProvider.propTypes = {\r\n  children: PropTypes.object,\r\n}\r\n","import React, { useEffect, useContext } from \"react\"\nimport \"antd/dist/antd.css\"\nimport \"./App.css\"\nimport { Layout, List, BackTop, Spin } from \"antd\"\nimport { PokemonCard } from \"./components/PokemonCard\"\nimport { PokemonListHeader } from \"./components/PokemonListHeader\"\nimport { PokemonStoreProvider, PokemonStoreContext } from \"./store/PokemonStore\"\nimport { useObserver } from \"mobx-react-lite\"\nconst { Header, Footer, Content } = Layout\n\nconst PokemonApp = () => {\n  const store = useContext(PokemonStoreContext)\n\n  useEffect(() => {\n    store.getPokemonsList()\n  }, [])\n\n  return useObserver(() => (\n    <Layout>\n      <Header>Pokemons</Header>\n      <Content className=\"main-wrapper\">\n        <div className=\"main-content\">\n          {store.pokemonsIsLoaded ? (\n            <List\n              grid={{\n                gutter: 16,\n                xs: 1,\n                sm: 3,\n                lg: 4,\n                xl: 6,\n              }}\n              pagination={{\n                pageSizeOptions: [\"10\", \"20\", \"50\"],\n              }}\n              header={<PokemonListHeader store={store} />}\n              dataSource={store.filteredPokemons}\n              renderItem={(item) => (\n                <List.Item>\n                  <PokemonCard pokemon={item} store={store} />\n                </List.Item>\n              )}\n            />\n          ) : (\n            <Spin size=\"large\" />\n          )}\n        </div>\n      </Content>\n      <BackTop />\n      <Footer className=\"footer\">© PokeApp</Footer>\n    </Layout>\n  ))\n}\n\nconst App = () => {\n  return (\n    <PokemonStoreProvider>\n      <PokemonApp />\n    </PokemonStoreProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"mobx-react-lite/batchingForReactDom\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}